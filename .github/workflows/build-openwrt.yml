#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt

on: 
  # push: 
  #   branches:
  #     - master
  #schedule:
  #  - cron: 0 16 * * 6
  watch:
    types: started

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  CONFIG_FILE: X86_64.config
  DIY_SH: diy.sh
  FREE_UP_DISK: true
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  UPLOAD_COWTRANSFER: false
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWD: ${{ secrets.PPPOE_PASSWD }}
  SCKEY: ${{ secrets.SCKEY }}
  TZ: Asia/Shanghai

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc
    
    - name: Get current date
      id: date
      run: |
        echo "::set-env name=date::$(date +'%m/%d_%Y_%H/%M')"
        echo "::set-env name=date2::$(date +'%m/%d %Y')"
        echo "::set-env name=date3::$(date +'%m.%d')"

    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        mv feeds.conf openwrt/
      
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/build_dir/host openwrt/build_dir /mnt/openwrt/dl /mnt/openwrt/staging_dir
        ln -s /mnt/openwrt/build_dir/hostpkg openwrt/build_dir/hostpkg
        ln -s /mnt/openwrt/build_dir/host openwrt/build_dir/host
        ln -s /mnt/openwrt/dl openwrt/dl
        ln -s /mnt/openwrt/staging_dir openwrt/staging_dir

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH
        if [ -n "$(ls -A "../patches" 2>/dev/null)" ]; then
        (
          find "../patches" -type f -name '*.patch'| xargs -i git apply {}
        )
        fi
        [ -e ../$CONFIG_FILE ] && mv ../$CONFIG_FILE .config
        [ _$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/') == generic ] && DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE_.*=y/\1/') || DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::$DEVICE_NAME"
        make defconfig
        
    - name: Default PPPOE Setting
      if: env.PPPOE_USERNAME && env.PPPOE_PASSWD
      run: |
        sed -i '$i uci set network.wan.username=${PPPOE_USERNAME}' openwrt/package/*/*/default-settings/files/zzz-default-settings
        sed -i '$i uci set network.wan.password=${PPPOE_PASSWD}' openwrt/package/*/*/default-settings/files/zzz-default-settings
        sed -i '$i uci commit network' openwrt/package/*/*/default-settings/files/zzz-default-settings
              
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-env name=status::success"

    - name: WeChat notification
      if: env.SCKEY && !cancelled()
      run: |
        [ ${status} == 'success' ] && curl https://sc.ftqq.com/${secrets.SCKEY}.send?text=OpenWrt ${date2} ${DEVICE_NAME} 编译完成 || curl https://sc.ftqq.com/${secrets.SCKEY}.send?text=OpenWrt ${date2} ${DEVICE_NAME} 编译失败
      

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      continue-on-error: true
      run: |
        mkdir firmware && find openwrt/bin/*/*/*/ -maxdepth 1 \
        -name "*combined*" \
        -or -name "sha256sums" \
        -or -name "*adbyby*" \
        -or -name "*cifs-mount*" \
        -or -name "*music-remote-center*" -or -name "*forked-daapd*" \
        -or -name "*airplay2*" \
        -or -name "*openclash*" \
        -or -name "*softethervpn*" \
        -or -name "*syncdial*" \
        -or -name "*usb-printer*" \
        -or -name "*verysync*" \
        -or -name "*vsftpd*" \
        -or -name "*xlnetacc*" \
        -or -name "*zerotier*" \
        | xargs -i mv -f {} ./firmware/
        cp openwrt/.config  ./firmware/config.txt
        cd firmware
        rename -v "s/^openwrt/${date3}-openwrt/" *img.gz
        zip -r luci-app-adbyby-plus.zip *adbyby* || true
        zip -r luci-app-baidupcs-web.zip *baidupcs* || true
        zip -r luci-app-cifs-mount.zip *cifs-mount* || true
        zip -r luci-app-music-remote-center.zip *music-remote-center* *forked-daapd* || true
        zip -r luci-app-airplay2.zip *airplay2* || true
        zip -r luci-app-openclash.zip *openclash* || true
        zip -r luci-app-softethervpn.zip *softethervpn* || true
        zip -r luci-app-syncdial.zip *syncdial* || true
        zip -r luci-app-usb-printer.zip *usb-printer* || true
        zip -r luci-app-verysync.zip *verysync* || true
        zip -r luci-app-vsftpd.zip *vsftpd* || true
        zip -r luci-app-xlnetacc.zip *xlnetacc* || true
        zip -r luci-app-zerotier.zip *zerotier* || true
        rm -Rf *.ipk
        echo "::set-env name=FIRMWARE::$PWD"
      
    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware
        path: ${FIRMWARE}
      
    - name: Create release
      id: create_release
      uses: actions/create-release@master
      if: env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${secrets.REPO_TOKEN}
      with:
        tag_name: ${date}_${DEVICE_NAME}
        release_name: ${date2} ${DEVICE_NAME}
        draft: false
        prerelease: false     

    - name: Upload release asset
      uses: csexton/release-asset-action@master
      if: env.REPO_TOKEN && env.UPLOAD_RELEASE == 'true'
      with:
        pattern: "${FIRMWARE}/*"
        github-token: ${secrets.REPO_TOKEN}
        release-url: ${steps.create_release.outputs.upload_url}
        
    - name: Upload firmware to cowtransfer
      if: env.UPLOAD_COWTRANSFER == 'true'
      run: |
        curl -fsSL https://git.io/cowtransfer | sh
        ./cowtransfer-uploader -b 2621440 -s -p 99 -t 3 --hash --silent ${FIRMWARE}
